services:
  nextcloud-postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    volumes:
      - postgres:/var/lib/postgresql/data
      - backup_postgres:/data/backup_postgres:ro
    networks:
      - nextcloud
    env_file:
      - nextcloud.env

  nextcloud-redis:
    image: redis:alpine
    restart: unless-stopped
    networks:
      - nextcloud

  nextcloud-app:
    image: nextcloud:fpm-alpine
    restart: unless-stopped
    volumes:
      - nextcloud:/var/www/html
    environment:
      - POSTGRES_HOST=nextcloud-postgres
      - REDIS_HOST=nextcloud-redis
      - OVERWRITEPROTOCOL=https
    env_file:
      - nextcloud.env
    depends_on:
      - nextcloud-postgres
      - nextcloud-redis
    networks:
      - nextcloud

  nextcloud-web:
    build: ./nextcloud-web
    restart: unless-stopped
    volumes:
      - nextcloud:/var/www/html:ro
    environment:
      - VIRTUAL_HOST=cloud.sad.bz
      - LETSENCRYPT_HOST=cloud.sad.bz
    env_file:
      - nextcloud.env
    depends_on:
      - nextcloud-app
      - proxy
    networks:
      - proxy-tier
      - nextcloud

  nextcloud-cron:
    image: nextcloud:fpm-alpine
    restart: unless-stopped
    volumes:
      - nextcloud:/var/www/html
    entrypoint: /cron.sh
    depends_on:
      - nextcloud-postgres
      - nextcloud-redis
    networks:
      - nextcloud

  proxy:
    build: ./proxy
    restart: unless-stopped
    ports:
      - 80:80
      - 443:443
    labels:
      com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy: "true"
    volumes:
      - certs:/etc/nginx/certs:ro
      - vhost.d:/etc/nginx/vhost.d
      - html:/usr/share/nginx/html
      - /var/run/docker.sock:/tmp/docker.sock:ro
    networks:
      - proxy-tier

  letsencrypt:
    image: nginxproxy/acme-companion
    restart: unless-stopped
    env_file: letsencrypt.env
    volumes:
      - certs:/etc/nginx/certs
      - acme:/etc/acme.sh
      - vhost.d:/etc/nginx/vhost.d
      - html:/usr/share/nginx/html
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - proxy-tier
    depends_on:
      - proxy

  wireguard:
    image: ghcr.io/wg-easy/wg-easy
    restart: unless-stopped
    environment:
      - WG_PORT=51822
    env_file:
      - wireguard.env
    volumes:
      - wireguard_config:/etc/wireguard
      - /lib/modules:/lib/modules:ro
    ports:
      - 51822:51822/udp
      - 51821:51821/tcp
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    sysctls:
      - net.ipv4.ip_forward=1
      - net.ipv4.conf.all.src_valid_mark=1
      - net.ipv6.conf.all.disable_ipv6=0
      - net.ipv6.conf.all.forwarding=1
      - net.ipv6.conf.default.forwarding=1

  dyndns:
    build: ./dyndns
    restart: unless-stopped
    env_file:
      - dyndns.env

  backup:
    build: ./backup
    hostname: home-server-backup
    restart: unless-stopped
    env_file:
      - backup.env
      - zug-lol.env
      - immich.env
      - nextcloud.env
    volumes:
      - backup_postgres:/data/backup_postgres
      - backup_logs:/data/backup_logs
      - wireguard_config:/data/wireguard_config:ro
      - nextcloud:/data/nextcloud:ro
      - certs:/data/certs:ro
      - vhost.d:/data/vhost.d:ro
      - html:/data/html:ro
      - acme:/data/acme.sh:ro
      - deluge_config:/data/deluge_config:ro
      - jellyfin_config:/data/jellyfin_config:ro
      - immich_uploads:/data/immich_uploads:ro
      - zib2_static:/data/zib2_static:ro
    networks:
      - nextcloud
      - immich
      - zug-lol

  deluge:
    image: lscr.io/linuxserver/deluge:latest
    restart: unless-stopped
    volumes:
      - deluge_config:/config
      - deluge_dowloads:/downloads
    ports:
      - 58846:58846 # daemon
      - 8112:8112 # web ui
      - 43289:43289 # data
      - 43289:43289/udp # data

  jellyfin:
    image: jellyfin/jellyfin
    restart: unless-stopped
    ports:
      - 8096:8096
    volumes:
      - jellyfin_config:/config
      - jellyfin_cache:/cache
      - deluge_dowloads:/media:ro

  nominatim:
    build: ./nominatim
    restart: unless-stopped
    ports:
      - 8081:8080
    networks:
      - proxy-tier
    depends_on:
      - proxy
    environment:
      - VIRTUAL_HOST=nominatim.sad.bz
      - VIRTUAL_PORT=8080
      - LETSENCRYPT_HOST=nominatim.sad.bz
      - PBF_URL=https://download.geofabrik.de/europe/austria-latest.osm.pbf
      - REPLICATION_URL=https://download.geofabrik.de/europe/austria-updates/
    volumes:
      - nominatim:/var/lib/postgresql/14/main
    shm_size: 512mb
    # TODO: cron update

  happy:
    build: https://github.com/Dosenpfand/flask-htmx-bootstrap-example.git
    restart: unless-stopped
    ports:
      - 8082:80
    networks:
      - proxy-tier
    depends_on:
      - proxy
    environment:
      - VIRTUAL_HOST=happy.sad.bz
      - VIRTUAL_PORT=80
      - LETSENCRYPT_HOST=happy.sad.bz

  zug-lol-staging:
    build: https://github.com/Dosenpfand/zug-lol.git
    restart: unless-stopped
    ports:
      - 8083:80
    networks:
      - proxy-tier
    depends_on:
      - proxy
    environment:
      - FLASK_SITE_TITLE=STAGING_DO_NOT_USE
      - VIRTUAL_HOST=staging.zug.lol
      - VIRTUAL_PORT=80
      - LETSENCRYPT_HOST=staging.zug.lol

  zug-lol-app:
    build: https://github.com/Dosenpfand/zug-lol.git
    restart: unless-stopped
    ports:
      - 8085:80
    environment:
      - VIRTUAL_HOST=zug.lol,www.zug.lol
      - VIRTUAL_PORT=80
      - LETSENCRYPT_HOST=zug.lol,www.zug.lol
    env_file:
      - zug-lol.env
    depends_on:
        zug-lol-db:
          condition: service_healthy
        proxy:
          condition: service_started
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost" ]
      start_period: 10s
      interval: 5m
      timeout: 5s
      retries: 10
    networks:
      - proxy-tier
      - zug-lol

  zug-lol-cron:
    build: https://github.com/Dosenpfand/zug-lol.git
    restart: unless-stopped
    env_file:
      - zug-lol.env
    depends_on:
      zug-lol-db:
        condition: service_healthy
    command: sh -c "bash /root/create_env.sh; cron -f & touch /var/log/cron.log && tail -f /var/log/cron.log"
    networks:
      - zug-lol

  zug-lol-db:
    image: postgres:alpine
    restart: unless-stopped
    env_file:
      - zug-lol.env
    volumes:
      - zug-lol-backup-restore:/docker-entrypoint-initdb.d
      - zug-lol-db:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $$POSTGRES_USER" ]
      start_period: 10s
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - zug-lol

  zug-lol-dyndns:
    build: ./dyndns
    restart: unless-stopped
    env_file:
      - zug-lol.env

  immich-server:
    image: ghcr.io/immich-app/immich-server:release
    volumes:
      - immich_uploads:/usr/src/app/upload
    env_file:
      - immich.env
    environment:
      - VIRTUAL_HOST=photos.sad.bz
      - VIRTUAL_PORT=2283
      - LETSENCRYPT_HOST=photos.sad.bz
    ports:
      - 2283:2283
    networks:
      - immich
      - proxy-tier
    depends_on:
      - proxy
      - immich-redis
      - immich-database
    restart: unless-stopped

  immich-machine-learning:
    image: ghcr.io/immich-app/immich-machine-learning:release
    volumes:
      - immich_model_cache:/cache
    env_file:
      - immich.env
    networks:
      - immich
    restart: unless-stopped

  immich-redis:
    image: redis:6.2-alpine
    networks:
      - immich
    restart: unless-stopped

  immich-database:
    image: ghcr.io/immich-app/postgres:14-vectorchord0.3.0-pgvectors0.2.0
    networks:
      - immich
    env_file:
      - immich.env
    environment:
      PG_DATA: /var/lib/postgresql/data
    volumes:
      - immich_postgres:/var/lib/postgresql/data
    restart: unless-stopped

  zib2:
    build: https://github.com/Dosenpfand/zib2-podcast.git
    restart: unless-stopped
    ports:
      - 8084:80
    networks:
      - proxy-tier
    depends_on:
      - proxy
    environment:
      - VIRTUAL_HOST=zib2.sad.bz
      - VIRTUAL_PORT=80
      - LETSENCRYPT_HOST=zib2.sad.bz
    env_file:
      - zib2.env
    volumes:
        - zib2_static:/code/app/static

  zib2-cron:
    build: https://github.com/Dosenpfand/zib2-podcast.git
    restart: unless-stopped
    depends_on:
      - proxy
    env_file:
      - zib2.env
    volumes:
        - zib2_static:/code/app/static
    command: bash -c "/code/create_env.sh; exec cron -f"
    init: true

  falschparker:
    build: https://github.com/Dosenpfand/falschparker.git
    restart: unless-stopped
    ports:
      - 8086:8000
    networks:
      - proxy-tier
    depends_on:
      - proxy
    environment:
      - VIRTUAL_HOST=falschparker.sad.bz
      - VIRTUAL_PORT=8000
      - LETSENCRYPT_HOST=falschparker.sad.bz
    env_file:
      - falschparker.env

volumes:
  postgres: # TODO: rename without losing data!
  nextcloud:
  certs:
  acme:
  vhost.d:
  html:
  wireguard_config:
  backup_postgres:
  backup_logs:
  deluge_config:
  deluge_dowloads:
  jellyfin_config:
  jellyfin_cache:
  nominatim:
  immich_uploads:
  immich_postgres:
  immich_model_cache:
  zib2_static:
  zug-lol-db:
  zug-lol-backup-restore:

networks:
  proxy-tier:
  nextcloud:
  immich:
  zug-lol:
